doctype html
html
  head
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
    title Serverlessで行こう

    link(rel='stylesheet', type='text/css', href='build/build.css')
    link(rel='stylesheet', href='https://use.fontawesome.com/releases/v5.0.6/css/all.css')
    link(rel='stylesheet', href='https://cdnjs.cloudflare.com/ajax/libs/font-awesome-animation/0.0.10/font-awesome-animation.css')

  body

    article.deck

      section
        h2 Serverlessで行こう
        h4 2018/5/xx

      section
        h2 自己紹介
        ul.build.build-items
          li 寺原　歩
          li <a href="https://www.is-tech.co.jp/"><image src="images/ist_logo.png" /></a><br/>の技術戦略推進部<br/><br/>
          li <h3>最近こんなアイコン使ってます<br /><image src="images/27805556.png" height="150" width="150"/></h3>

      section
        h1 Whats Serverless?

      section
        h2 <s>サーバを持たない</s>
        h4 ↑良く言われがち<br/><br/><br/><br/>
        h2 サーバを管理しない

      section
        <blockquote class="twitter-tweet" data-lang="ja"><p lang="en" dir="ltr">If your PaaS can efficiently start instances in 20ms that run for half a second, then call it serverless. <a href="https://t.co/S3YzvqFYLR">https://t.co/S3YzvqFYLR</a></p>&mdash; adrian cockcroft (@adrianco) <a href="https://twitter.com/adrianco/status/736553530689998848">2016年5月28日</a></blockquote>
        <script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

      section
        h2 あどりあん曰く、
        <p><i class="fab fa-jenkins fa-2x"></i></p>「もしそのPaaSが、0.5秒実行するインスタンスを20ミリ秒以下で効率的に起動できるのなら、それをサーバレスと呼ぶ。」

      section
        h1 Whats Serverless?

      section
        h2 <a href="https://knowledge.is-tech.co.jp/knowledge/open.knowledge/view/20">knowledge#20</a> を見よう<br/>
        <p><i class="fas fa-bomb fa-5x faa-tada animated" style="color: red"></i></p>

      section
        h2 一般的には
        ul.build.build-items
          li <h3>AWS Lambda</h3>
            img(src="images/lambda_icon.png")
          li <h3>Azure Functions</h3>
            img(src="images/azure_functions.png")
          li <h3>この辺を使ってれば大体Serverlessです。</h2>

      section
        h2 本題
        h3 実際にServerlessでWebAPIを作ってみよう

      section
        h2 ServerlessFrameworkを使う
        h3 in AWS × nodejs
        pre
          code.language-javascript.
            // nodeとnpm入っている前提
            npm install -g serverless
            serverless create --template aws-nodejs --path my-service
            cd ./my-service

      section
        h2 AWSで動かす
        ul.build.build-items
          li <s>serverless deploy -v</s>
          li 残念ながらAWSアカウント持っていないので・・・。

      section
        h2 Localで動かす
        h3 serverless-offlineを使う
        pre
          code.language-bash.
            npm install serverless-offline --save-dev

      section
        h2 Localで動かす
        h3 serverless.ymlに下記の定義を添えてあげる
        pre
          code.language-javascript.
            plugins:
              - serverless-offline

            functions:
              hello:
                handler: handler.hello
                events:
                  - http:
                      method: GET
                      path: hello

      section
        h2 Localで動かす
        h3 起動コマンドを実行
        pre
          code.language-javascript.
            serverless offline start

      section
        h2 今こんな感じ
        img(src="images/initial_conposition.png")

      section
        h1 超簡単！正味５分
        ul.build.build-items
          li <h3>だけだとちょっと物足りないので</h3>

      section
        h2 ちょっと発展
        h3 更に子Lambdaを繋ぎたい
        img(src="images/plus_lambda.png" height="300" width="450")

      section
        h3 serverless.ymlにhow-do-you-doを追加
        pre
          code.language-javascript.
            functions:
              howDoYouDo:
                handler: handler.howDoYouDo

      section
        h3 handler.jsにhowDoYouDo関数を追加
        pre
          code.language-javascript.
            const howDoYouDo = (event, context, callback) =>
              callback(null, { message: "how do you do?" });

      section
        h3 hellowがhowDoYouDo関数を呼び出す in handler.js
        pre
          code.language-javascript.
            const hello = (event, context, callback) => {
              const responseForHowDoYouDo =
                process.env.IS_LOCAL || process.env.IS_OFFLINE ?
                howDoYouDo(event, context, (err, data) => data) :
                lambda.invokeAsync({FunctionName: 'howDoYouDo'},
                  (err, data) => data
                );

              const response = {
                statusCode: 200,
                body: JSON.stringify({
                  message: `hello!  ${responseForHowDoYouDo.message}`
                }),
              };

              callback(null, response);
            };

      section
        h3 もうひと手間 in handler.js
        pre
          code.language-javascript.
            // 行頭に・・・
            const AWS = require('aws-sdk');
            const lambda = new AWS.Lambda();
            // 行末に・・・
            module.exports = {
              hello,
              howDoYouDo
            }

      section
        h3 aws-sdkをinstallして...
          pre
            code.language-javascript.
              npm install --save aws-sdk


      section
        h3 完成
        img(src="images/plus_lambda.png" height="300" width="450")

      section
        h3 他にも、、、DynamoDBやマネージメントサービス各種を繋げることが可能
        img(src="images/add_dynamo.png")

      section
        h2 Serverlessで行こう<br/><br/>
        h2 おしまい

    script(src='build/build.js')
